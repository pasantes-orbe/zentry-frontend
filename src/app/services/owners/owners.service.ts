//src/app/services/owners/owners.service.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from 'src/environments/environment';
import { OwnerResponse } from '../../interfaces/ownerResponse-interface';
import { Observable } from 'rxjs';
import { OwnerInterface } from '../../interfaces/owner-interface';
import { AlertService } from '../helpers/alert.service';
import { CountryStorageService } from '../storage/country-storage.service';
import { Owner_CountryInterface } from 'src/app/interfaces/owner_country-interface';

@Injectable({
Â  providedIn: 'root'
})
export class OwnersService {

Â  constructor(private _http: HttpClient, private _alertService: AlertService, private _router: Router, private _countryStorageService: CountryStorageService) { }

Â  public getAll(): Observable<OwnerResponse[]>{
Â  Â  return this._http.get<OwnerResponse[]>(`${environment.URL}/api/owners`)
Â  }

Â  public async getAllByCountryID(): Promise<Observable<OwnerResponse[]>>{
Â  Â  const country = await this._countryStorageService.getCountry()
Â  Â  const countryID = country.id

Â  Â  console.log(country.id);
Â  Â  return this._http.get<OwnerResponse[]>(`${environment.URL}/api/owners/country/get_by_id/${countryID}`)
Â  }

Â  public async getAllByCountry(): Promise<Observable<Owner_CountryInterface[]>>{
Â  Â  const country = await this._countryStorageService.getCountry()
Â  Â  const countryID = country.id
Â  Â  // âœ… NOTA: Esta funciÃ³n llama a la ruta correcta que lista propietarios por paÃ­s.
Â  Â  // El componente de asignaciÃ³n de propiedad debe usar este mÃ©todo para cargar el listado.
Â  Â  return this._http.get<Owner_CountryInterface[]>(`${environment.URL}/api/users/owners/get_by_country/${countryID}`)
Â  }

Â  public getAllByRole(): Observable<OwnerInterface[]>{
Â  Â  return this._http.get<OwnerInterface[]>(`${environment.URL}/api/users?role=propietario`)
Â  }

Â  public getByID(id): Observable<OwnerResponse>{

Â  Â  return this._http.get<OwnerResponse>(`${environment.URL}/api/owners/${id}`)

Â  }

Â  public async relationWithProperty(user_id, property_id){
Â  Â  const formData = new FormData();
Â  Â  formData.append('id_user', user_id);
Â  Â  formData.append('id_property', property_id);
Â  Â  Â await this._alertService.setLoading();

Â  Â  
Â  Â  // ðŸ›‘ CORRECCIÃ“N CRUCIAL: Se cambia el endpoint a '/api/user-properties'.
Â  Â  // Esta ruta es la que maneja la relaciÃ³n muchos a muchos a travÃ©s de la tabla intermedia 'user_properties'.
Â  Â  // El endpoint anterior '/api/owners' probablemente causaba el error 400 o no tenÃ­a la lÃ³gica de asignaciÃ³n correcta.
Â  Â  this._http.post(`${environment.URL}/api/user-properties`, formData).subscribe(
Â  Â  Â  async (res) => {
Â  Â  Â  Â  console.log(res)
Â  Â  Â  Â  await this._alertService.removeLoading()
Â  Â  Â  Â  this._alertService.showAlert("Â¡Listo!", "La propiedad se asignÃ³ con Ã©xito al usuario");
Â  Â  Â  Â  this._router.navigate(['/admin/ver-propietarios']); 
Â  Â  Â  },
Â  Â  Â  async (err) => {
Â  Â  Â  Â  console.log(err);
Â  Â  Â  Â  await this._alertService.removeLoading();
Â  Â  Â  Â  // NOTA: Se mantiene la lÃ³gica de mostrar el mensaje de error del backend.
Â  Â  Â  Â  this._alertService.showAlert("Â¡Ooops!", `${err['error']['msg']}`);
Â  Â  Â  Â  this._router.navigate([`/admin/ver-propietarios`]);
Â  Â  }
Â  Â  )
Â  }
}