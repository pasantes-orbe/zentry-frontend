// --- Archivo: assign-country-to-owner.page.ts (Corregido y Refactorizado) ---

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IonicModule } from '@ionic/angular';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';

//Servicios
import { OwnersService } from '../../../../services/owners/owners.service';
import { PropertiesService } from 'src/app/services/properties/properties.service';
import { AlertService } from 'src/app/services/helpers/alert.service';

//Interfaces
import { Owner_CountryInterface } from '../../../../interfaces/owner_country-interface';
import { Property_OwnerInterface } from '../../../../interfaces/property_owner-interface';

//Componentes
import { NavbarBackComponent } from "src/app/components/navbars/navbar-back/navbar-back.component";

@Component({
Â  selector: 'app-assign-country-to-owner',
Â  templateUrl: './assign-country-to-owner.page.html',
Â  styleUrls: ['./assign-country-to-owner.page.scss'],
Â  standalone: true,
Â  imports: [
Â  Â  CommonModule,
Â  Â  IonicModule,
Â  Â  ReactiveFormsModule,
Â  Â  FormsModule,
Â  Â  NavbarBackComponent
Â  Â  // El FilterByPipe ya no es necesario
Â  ]
})
export class AssignCountryToOwnerPage implements OnInit {

Â  public form: FormGroup;
Â  
Â  // Listas originales con todos los datos
Â  public owners: Owner_CountryInterface[] = [];
Â  public properties: Property_OwnerInterface[] = [];

Â  // Listas que se mostrarÃ¡n en la vista y que serÃ¡n filtradas
Â  public filteredOwners: Owner_CountryInterface[] = [];
Â  public filteredProperties: Property_OwnerInterface[] = [];

Â  public loading = true; // AÃ±adimos estado de carga

Â  constructor(
Â  Â  private _alertService: AlertService,
Â  Â  private _router: Router,
Â  Â  private _formBuilder: FormBuilder,
Â  Â  private _ownersService: OwnersService,
Â  Â  private _propertiesService: PropertiesService
Â  ) {
Â  Â  this.form = this.createForm();
Â  }

Â  ngOnInit() {
Â  Â  this.loadData();
Â  }

Â  async loadData() {
Â  Â  this.loading = true;

Â  Â  try {
Â  Â  Â  // âœ… NOTA: Esta funciÃ³n es la correcta que llama a la ruta '/api/users/owners/get_by_country/:id_country'
Â  Â  Â  // y resuelve el problema del listado.
Â  Â  Â  // Cargar Propietarios desde el Backend
Â  Â  Â  const ownersObservable = await this._ownersService.getAllByCountry();
Â  Â  Â  ownersObservable.subscribe(ownersData => {
Â  Â  Â  Â  this.owners = ownersData || []; // Aseguramos que sea un array
Â  Â  Â  Â  this.filteredOwners = [...this.owners]; 
Â  Â  Â  });

Â  Â  Â  // Cargar Propiedades desde el Backend
Â  Â  Â  const propertiesObservable = await this._propertiesService.getAllProperty_OwnerByCountryID();
Â  Â  Â  propertiesObservable.subscribe(propertiesData => {
Â  Â  Â  Â  this.properties = propertiesData || []; // Aseguramos que sea un array
Â  Â  Â  Â  this.filteredProperties = [...this.properties];
Â  Â  Â  });

Â  Â  } catch (error) {
Â  Â  Â  console.error("Error al cargar los datos de la pÃ¡gina:", error);
Â  Â  Â  this._alertService.presentAlert('Error al cargar datos. Intente nuevamente.');
Â  Â  } finally {
Â  Â  Â  this.loading = false;
Â  Â  }
Â  }

Â  public onSearchOwners(event: any): void {
Â  Â  const searchTerm = (event.target.value || '').toLowerCase();
Â  Â  if (!searchTerm) {
Â  Â  Â  this.filteredOwners = [...this.owners];
Â  Â  Â  return;
Â  Â  }
Â  Â  this.filteredOwners = this.owners.filter(o => {
Â  Â  Â  const user = o.user;
Â  Â  Â  if (!user) return false;
Â  Â  Â  //CORRECCIÃ“N: Convertimos el DNI a string antes de usar .includes()
Â  Â  Â  return (user.name.toLowerCase().includes(searchTerm) ||
Â  Â  Â  Â  Â  Â  Â  user.lastname.toLowerCase().includes(searchTerm) ||
Â  Â  Â  Â  Â  Â  Â  String(user.dni).toLowerCase().includes(searchTerm));
Â  Â  });
Â  }

Â  public onSearchProperties(event: any): void {
Â  Â  const searchTerm = (event.target.value || '').toLowerCase();
Â  Â  if (!searchTerm) {
Â  Â  Â  this.filteredProperties = [...this.properties];
Â  Â  Â  return;
Â  Â  }
Â  Â  this.filteredProperties = this.properties.filter(p => {
Â  Â  Â  Â  const prop = p.property;
Â  Â  Â  Â  if (!prop) return false;
Â  Â  Â  Â  //CORRECCIÃ“N: Convertimos el nÃºmero de propiedad a string
Â  Â  Â  Â  return (prop.name.toLowerCase().includes(searchTerm) ||
Â  Â  Â  Â  Â  Â  Â  Â  String(prop.number).toLowerCase().includes(searchTerm));
Â  Â  });
Â  }

Â  public createForm(): FormGroup {
Â  Â  return this._formBuilder.group({
Â  Â  Â  user_id: ['', [Validators.required]],
Â  Â  Â  property_id: ['', [Validators.required]],
Â  Â  });
Â  }

Â  public async asignarPropiedadAlUsuario() {
Â  Â  if (this.form.invalid) {
Â  Â  Â  this._alertService.presentAlert('Formulario InvÃ¡lido: Por favor, seleccione un propietario y una propiedad.');
Â  Â  Â  return;
Â  Â  }
Â  Â  const userId = this.form.get('user_id')?.value;
Â  Â  const propertyId = this.form.get('property_id')?.value;
Â  Â  
Â  Â  try {
Â  Â  Â  // ðŸ›‘ CORRECCIÃ“N: La funciÃ³n 'relationWithProperty' en el servicio 
Â  Â  Â  // ya maneja su propia subscripciÃ³n, loading y navegaciÃ³n.
Â  Â  Â  // Por lo tanto, no necesita ser 'await'-eada ni envuelta en try/catch aquÃ­
Â  Â  Â  // si devuelve void (que es lo que hace al usar .subscribe()).
Â  Â  Â  // Llamada al servicio (ya corregido en el paso anterior para usar POST /api/user-properties)
Â  Â  Â  this._ownersService.relationWithProperty(userId, propertyId);
Â  Â  Â  
Â  Â  Â  // Eliminamos las lÃ­neas de alert y navegaciÃ³n que se duplican con la lÃ³gica del servicio.
Â  Â  Â  // this._alertService.presentAlert('Ã‰xito: La propiedad ha sido asignada correctamente.');
Â  Â  Â  this.form.reset();
Â  Â  } catch (err) {
Â  Â  Â  // El error se maneja en el servicio. Solo registramos en consola aquÃ­.
Â  Â  Â  console.error("Error al asignar propiedad:", err);
Â  Â  }
Â  }

Â  public getForm(): FormGroup {
Â  Â  return this.form;
Â  }
}